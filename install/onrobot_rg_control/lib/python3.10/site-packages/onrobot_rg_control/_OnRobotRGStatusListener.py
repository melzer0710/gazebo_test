#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from onrobot_rg_msgs.msg import OnRobotRGInput
import rclpy.logging
import numpy as np


class OnRobotRGStatusListener(Node):
    
    def __init__(self, nodeName : str):
        """ Initializes the node and subscribe to the OnRobotRGInput topic. """
        
        super().__init__(nodeName)
        self.logger = rclpy.logging.get_logger("OnRobotRGStatusListener")
        self.sub = self.create_subscription(OnRobotRGInput, 'OnRobotRGInput', self.printStatus, 1)

    def printStatus(self, status):
        """ Prints the status string generated by the statusInterpreter. """

        self.logger.info(self.statusInterpreter(status))


    def statusInterpreter(self, status):
        """ Generates a string according to the current status. """

        output = '\n-----\nOnRobot RG status interpreter\n-----\n'

        # gfof
        output += 'gfof = ' + str(np.int16(status.gfof)) + ': '
        output += 'Current fingertip offset: ' + str(np.int16(status.gfof) / 10.0) + ' mm\n'

        # ggwd
        output += 'ggwd = ' + str(np.int16(status.ggwd)) + ': '
        output += 'Current width between the gripper fingers (w/o offset): ' + \
                str(np.int16(status.ggwd) / 10.0) + ' mm\n'

        # gsta
        output += 'gsta = ' + str(status.gsta) + ': '
        gSTA16bit = format(status.gsta, '016b')
        output += '(gsta (16 bit) = ' + gSTA16bit + '), Currtent states: '
        if int(gSTA16bit[-1]):
            output += ' A motion is ongoing so new commands are not accepted.'
        if int(gSTA16bit[-2]):
            output += ' An internal- or external grip is detected.'
        if int(gSTA16bit[-3]):
            output += ' Safety switch 1 is pushed.'
        if int(gSTA16bit[-4]):
            output += ' Safety circuit 1 is activated so the gripper cannot move.'
        if int(gSTA16bit[-5]):
            output += ' Safety switch 2 is pushed.'
        if int(gSTA16bit[-6]):
            output += ' Safety circuit 2 is activated so the gripper cannot move.'
        if int(gSTA16bit[-7]):
            output += ' Any of the safety switch is pushed.'

        # gwdf
        output += '\ngWDF = ' + str(np.int16(status.gwdf)) + ': '
        output += 'Current width between the gripper fingers (w offset): ' + \
                str(np.int16(status.gwdf) / 10.0) + ' mm\n'

        return output


def main():
    
    rclpy.init(args=None)
    node = OnRobotRGStatusListener('OnRobotRGStatusListener')
    rclpy.spin(node)
    
    node.destroy_node()
    rclpy.shutdown()
